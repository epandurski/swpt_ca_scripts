#!/bin/bash
set -e
set -o pipefail

if [[ "$#" != 2 || "$1" == "--help" ]]; then
    echo 'Change configuration parameters for a registered peer.'
    echo
    echo 'Usage: reconfigure-peer PEER_NODE_ID NUMBER_OF_QUEUES'
    echo '       reconfigure-peer PEER_NODE_ID --deactivate'
    exit 2
fi

function find_script_dir {
    SOURCE=${BASH_SOURCE[0]}
    while [ -L "$SOURCE" ]; do # resolve $SOURCE until the file is not a symlink
        DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
        SOURCE=$(readlink "$SOURCE")
        # If $SOURCE was a relative symlink, we need to resolve it relative
        # to the path where the symlink file was located.
        [[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE
    done
    DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
    export SWPT_CA_DIR="$DIR"
}

function invalid_node_type {
    echo
    echo "ERROR: The node type is invalid."
    echo
    exit 1
}

function update_peer_manifest_file {
    echo "Updating peer manifest file..."
    case "$(cat "$DIR/db/nodetype")" in
        "Creditors Agents")
            subnet_file="$peer_dir/masq-subnet.txt"
            ;;
        "Debtors Agents")
            subnet_file="$DIR/debtors-subnet.txt"
            ;;
        "Accounting Authorities")
            subnet_file="$peer_dir/subnet.txt"
            ;;
        *)
            invalid_node_type
            ;;
    esac
    if [ -e "$peer_dir/DEACTIVATED" ]; then
        deactivated=true
    else
        deactivated=false
    fi
    DN_SERIAL_NUMBER="$1"
    DN_OU="$(cat "$peer_dir/nodetype.txt")"
    subnet="$(cat "$subnet_file")"
    root_cert="$(openssl x509 -in "$peer_dir/root-ca.crt" | sed  's/^/    /')"
    sub_cert="$(openssl x509 -in "$peer_dir/sub-ca.crt" | sed  's/^/    /')"
    queues="$(cat $peer_dir/queues.txt)"
    stomp_config="$(cat "$peer_dir/nodeinfo/stomp.toml" || true)"
    stomp_config="$(echo "$stomp_config" | sed  's/^/    /')"
    cat > "$peer_dir/peer-manifest.yaml" <<EOF
apiVersion: k8s.swaptacular.org/v1
kind: Peer
metadata:
  name: peer-$DN_SERIAL_NUMBER
spec:
  nodeID: $DN_SERIAL_NUMBER
  nodeType: $DN_OU
  subnet: $subnet
  queues: $queues
  deactivated: $deactivated
  rootCert: |
$root_cert
  subCert: |
$sub_cert
  stompConfiguration: |
$stomp_config
EOF
}

find_script_dir || exit 3

peer_dir="$DIR/peers/$1"
peer_crt_file="$peer_dir/sub-ca.crt"
new_value="$2"

if [ -s "$peer_crt_file" ]; then
    if [[ "$new_value" == "--deactivate" ]]; then
        echo "Deactivating peer $1..."
        touch "$peer_dir/DEACTIVATED"
    else
        old_value="$(cat "$peer_dir/queues.txt")"
        if ! (echo "$new_value" | grep -E '^[1-9][0-9]{0,1}$' > /dev/null); then
            new_value=0
        fi
        if [[ "$old_value" > "$new_value" ]]; then
            echo
            echo "ERROR: Invalid number of queues. The number of queues"
            echo "       must be between $old_value and 99."
            echo
            exit 1
        fi
        echo "Setting the number of queues to $new_value..."
        echo "$new_value" > "$peer_dir/queues.txt"
    fi
    update_peer_manifest_file
else
    echo
    echo "ERROR: No registered peer with node ID $1."
    echo
    exit 1
fi

echo
echo '***********************************************************************'
echo "* IMPORTANT: Peer's configuration files have been updated. Note       *"
echo '*            that for the new configuration to take effect, it        *'
echo '*            has to be applied to your servers.                       *'
echo '***********************************************************************'
echo "Peer directory: $peer_dir/"
