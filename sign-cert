#!/bin/bash
set -e

function delete_temp_dir {
    rm -rf "$temp_dir"
}

function invalid_node_type {
    echo
    echo "ERROR: The node type is invalid."
    echo
    exit 1
}

function can_not_reserve_subnet {
    echo
    echo "ERROR: Can not reserve a subnet."
    echo
    exit 1
}

function reserve_subnet {
    subnet_dir="$1"
    subnet_len="$2"
    subnet_nodeid="$3"
    format_str="%0${subnet_len}x\n"
    seqnum_file="$subnet_dir/SEQNUM"
    seqnum=$(flock -s "$seqnum_file" cat "$seqnum_file")
    error_code=0
    set -o noclobber
    while true
    do
        seqnum=$((seqnum+1))
        subnet=$(printf "$format_str" "$seqnum")
        if [ "${#subnet}" -gt "$subnet_len" ]; then
            error_code=1
            break
        fi
        if echo "$subnet_nodeid" > "$subnet_dir/$subnet"; then
            break
        fi
    done
    set +o noclobber
    flock -x "$seqnum_file" echo "$seqnum" > "$seqnum_file"
    return "$error_code"
}

function reserve_creditor_subnet {
    reserve_subnet "db/creditor-subnets" 8 "$1"
}

function reserve_debtor_subnet {
    reserve_subnet "db/debtor-subnets" 2 "$1"
}

function reserve_exclusive_subnet {
    subnet_dir="db/debtor-subnets"
    subnet_nodeid="$1"
    subnet=
    error_code=1
    set -o noclobber
    if echo "$subnet_nodeid" > "$subnet_dir/EXCLUSIVE"; then
        error_code=0
    fi
    set +o noclobber
    return "$error_code"
}

function save_subnet {
    case "$(cat db/nodetype)" in
        "Creditors Agents")
            if [[ "$DN_OU" != "Accounting Authorities" ]]; then
                invalid_node_type
            fi
            if ! reserve_creditor_subnet "$DN_SERIAL_NUMBER"; then
                can_not_reserve_subnet
            fi
            ;;
        "Debtors Agents")
            if [[ "$DN_OU" != "Accounting Authorities" ]]; then
                invalid_node_type
            fi
            if ! reserve_exclusive_subnet "$DN_SERIAL_NUMBER"; then
                can_not_reserve_subnet
            fi
            ;;
        "Accounting Authorities")
            case "$DN_OU" in
                "Creditors Agents")
                    if ! reserve_creditor_subnet "$DN_SERIAL_NUMBER"; then
                        can_not_reserve_subnet
                    fi
                    ;;
                "Debtors Agents")
                    if ! reserve_debtor_subnet "$DN_SERIAL_NUMBER"; then
                        can_not_reserve_subnet
                    fi
                    ;;
                *)
                    invalid_node_type
                    ;;
            esac
            ;;
        *)
            invalid_node_type
            ;;
    esac
    echo "$subnet" > "$1"
}

if [[ "$#" != 1 || "$1" == "--help" ]]; then
    echo 'Creates a peer bundle file, containing a signed certificate, from'
    echo 'a request bundle file, containing a certificate signing request (CSR).'
    echo 'The request bundle file should be created and sent to you by another'
    echo 'Swaptacular node, which wants to establish a permanent authenticated '
    echo 'connection with your Swaptacular node.'
    echo
    echo 'Usage: sign-cert REQBUNDLE_FILE'
    exit 2
fi


temp_dir=$(mktemp -d)
trap delete_temp_dir EXIT

unzip "$1" -d "$temp_dir"
csr_file="$temp_dir/root-ca.csr"

DN=$(openssl req -noout -subject -in "$csr_file")
export DN_O=$(echo "$DN" | grep -Po '(?<=\bO = )[\sA-Za-z0-9-]+')
export DN_OU=$(echo "$DN" | grep -Po '(?<=\bOU = )[\sA-Za-z0-9-]+')
export DN_SERIAL_NUMBER=$(echo "$DN" | grep -Po '(?<=\bserialNumber = )[a-f0-9-]+')

peer_dir="peers/$DN_SERIAL_NUMBER"

if [[ "$DN_SERIAL_NUMBER" == "$(cat db/nodeid)" || -d "$peer_dir" ]]; then
    echo
    echo 'ERROR: A certificate signing request from the Swaptacular node'
    echo "       \"$DN_SERIAL_NUMBER\" has been approved already."
    echo
    echo '       Signing another certificate for the same Swaptacular node'
    echo '       can not be allowed, because this can result in a serious'
    echo '       security breach.'
    exit 1
fi

crt_filename=sub-ca.crt
temp_crt_file="$temp_dir/$crt_filename"
peerbundle_files=("$crt_filename" "subnet.txt")
echo

openssl ca \
    -config root-ca.conf \
    -in "$csr_file" \
    -out "$temp_crt_file" \
    -extensions sub_ca_ext

if [ -s "$temp_crt_file" ]; then
    save_subnet "$temp_dir/subnet.txt"
    echo "$DN_OU" > "$temp_dir/nodetype.txt"
    pushd . > /dev/null
    cd "$temp_dir"
    zip -X peerbundle ${peerbundle_files[@]}
    rm "$temp_crt_file" "$csr_file"
    popd > /dev/null
    mv "$temp_dir" "$peer_dir"

    echo
    echo '***********************************************************************'
    echo '* IMPORTANT: A new peer bundle file has been created, containing the  *'
    echo '*            certificate that you just signed. You should send this   *'
    echo '*            file to the owner of the Swaptacular node that made the  *'
    echo '*            certificate signing request.                             *'
    echo '*                                                                     *'
    echo '*            Also, do not forget to send your own request bundle      *'
    echo '*            file as well (see the "create-reqbundle" command), so    *'
    echo '*            that you could receive a corresponding certificate from  *'
    echo '*            your peer node.                                          *'
    echo '***********************************************************************'
    echo "File location: $peer_dir/peerbundle.zip"
fi
