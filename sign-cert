#!/bin/bash
set -e

function delete_temp_crt_file {
  rm -f "$temp_crt_file"
}

function reserve_subnet {
    subnet_dir="$1"
    subnet_len="$2"
    subnet_nodeid="$3"
    format_str="%0${subnet_len}x\n"
    seqnum_file="$subnet_dir/SEQNUM"
    seqnum=$(flock -s "$seqnum_file" cat "$seqnum_file")
    error_code=0
    set -o noclobber
    while true
    do
        seqnum=$((seqnum+1))
        subnet=$(printf "$format_str" "$seqnum")
        if [ "${#subnet}" -gt "$subnet_len" ]; then
            error_code=1
            break
        fi
        if echo "$subnet_nodeid" > "$subnet_dir/$subnet"; then
            break
        fi
    done
    set +o noclobber
    flock -x "$seqnum_file" echo "$seqnum" > "$seqnum_file"
    return "$error_code"
}

function reserve_creditor_subnet {
    reserve_subnet "db/creditor-subnets" 8 "$1"
}

function reserve_debtor_subnet {
    reserve_subnet "db/debtor-subnets" 2 "$1"
}

function reserve_exclusive_subnet {
    subnet_dir="db/debtor-subnets"
    subnet_nodeid="$1"
    subnet=
    error_code=1
    set -o noclobber
    if echo "$subnet_nodeid" > "$subnet_dir/EXCLUSIVE"; then
        error_code=0
    fi
    set +o noclobber
    return "$error_code"
}

if [[ "$#" != 1 || "$1" == "--help" ]]; then
    echo 'Generates a certificate file from a certificate signing request (CSR)'
    echo 'file. The CSR file should be created and sent to you by another'
    echo 'Swaptacular node, which wants to establish a permanent authenticated '
    echo 'connection with your Swaptacular node.'
    echo
    echo 'Usage: sign-cert CSR_FILE'
    exit 2
fi

csr_file="$1"
crt_file=$(echo "$csr_file" | sed s/\.csr$//).crt

if [ -s "$crt_file" ]; then
    echo
    echo "ERROR: $crt_file file already exists."
    echo
    exit 1
fi

DN=$(openssl req -noout -subject -in "$csr_file")
export DN_O=$(echo "$DN" | grep -Po '(?<=\bO = )[\sA-Za-z0-9-]+')
export DN_OU=$(echo "$DN" | grep -Po '(?<=\bOU = )[\sA-Za-z0-9-]+')
export DN_SERIAL_NUMBER=$(echo "$DN" | grep -Po '(?<=\bserialNumber = )[a-f0-9-]+')

approved_csr_file="approved-requests/$DN_SERIAL_NUMBER.csr"

if [ -s "$approved_csr_file" ]; then
    # TODO: Consider allowing the creation of a new certificate, in case the
    # node's public key in the old, already approved CSR (Certificate
    # Signing Request) is the same as the public key in the new CSR. This
    # would allow for the easy renewal of expiring certificates. Although,
    # this is not a problem when we use "eternal" certificates.
    if ! cmp "$csr_file" "$approved_csr_file" &> /dev/null; then
        echo
        echo 'ERROR: A certificate signing request from the same Swaptacular'
        echo '       node has been approved already. Signing another certificate'
        echo '       for the same Swaptacular node can not be allowed, because'
        echo '       this can result in a serious security breach.'
        echo
        exit 1
    fi
fi

temp_crt_file=$(mktemp)
trap delete_temp_crt_file EXIT

openssl ca \
    -config root-ca.conf \
    -in "$csr_file" \
    -out "$temp_crt_file" \
    -extensions sub_ca_ext

if [ -s "$temp_crt_file" ]; then
    cp "$csr_file" "$approved_csr_file"
    mv "$temp_crt_file" "$crt_file"
    echo
    echo '***********************************************************************'
    echo '* IMPORTANT: A new certificate file has been created. You can send    *'
    echo '*            it to the owner of the Swaptacular node that made the    *'
    echo '*            certificate signing request.                             *'
    echo '***********************************************************************'
    echo "File location: $crt_file"
fi
