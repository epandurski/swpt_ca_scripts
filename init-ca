#!/bin/bash

if [[ "$#" != 0 ]]; then
    echo 'Initialises the root-CA database. Should be run once, in the beginning.'
    echo
    echo 'NOTE: Generally, it should be safe to run this command on an already'
    echo '      initialised database. In this case, it will try to find typical'
    echo '      problems in the existing database, and fix them.'
    echo
    echo 'Usage: init-ca'
    exit 2
fi

for dependency in openssl envsubst uuidgen cmp flock printf zip unzip date
do
    if ! which "$dependency" &> /dev/null; then
        echo
        echo "ERROR: $dependency is not installed on your system."
        echo
        exit 2
    fi
done

function find_script_dir {
    SOURCE=${BASH_SOURCE[0]}
    while [ -L "$SOURCE" ]; do # resolve $SOURCE until the file is not a symlink
        DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
        SOURCE=$(readlink "$SOURCE")
        # If $SOURCE was a relative symlink, we need to resolve it relative
        # to the path where the symlink file was located.
        [[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE
    done
    DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
}

function delete_self_csr {
    rm -f "$self_csr"
}

function generate_conf_file {
    export ORGANIZATIONAL_UNIT_NAME=$(cat db/nodetype)
    export SERIAL_NUMBER=$(cat db/nodeid)
    envsubst '$ORGANIZATIONAL_UNIT_NAME $SERIAL_NUMBER' \
             < root-ca.conf.template \
             > root-ca.conf
}

function ask_for_aa_serial_numbber {
    echo
    while read -p 'Enter your accounting authority prefix (8 hexadecimals): ' aa_prefix
    do
        if echo "$aa_prefix" | grep -E '^[0-9a-f]{8}$' > /dev/null; then
            break
        fi
        echo "An invalid accounting authority prefix has been entered."
    done
    echo $aa_prefix > db/nodeid
}

function release_unused_debtor_subnets {
    # Sometimes a subnet lock file is created, but a corresponding peer is
    # not created. With the limited number of debtor subnets (256), this can
    # become a problem. Here we try to find broken subnet lock files and
    # remove them.
    if [ -s "subnets/debtors/SEQNUM" ]; then
        for fullname in subnets/debtors/*;
        do
            name="$(basename "$fullname")"
            if [[ "$name" != "SEQNUM" ]]; then
                node_id="$(cat "$fullname")"
                node_subnet="$(cat "peers/$node_id/subnet.txt" 2> /dev/null || true)"
                if [[ "$name" != "$node_subnet" ]]; then
                    released_subnet=yes
                    rm "$fullname"
                    echo "Released unused subnet: $fullname"
                fi
            fi
        done
        if [[ -n "$released_subnet" ]]; then
            echo "-1" > subnets/debtors/SEQNUM
            echo 'Rebooted subnet counter: subnets/debtors/SEQNUM'
            echo
        fi
    fi
}

find_script_dir || exit 3
cd "$DIR" || exit 3
mkdir certs private db nodeinfo 2> /dev/null
chmod 700 private
touch db/index

set -e
release_unused_debtor_subnets

if [ ! -s db/serial ]; then
    openssl rand -hex 16  > db/serial
fi

if [ ! -s db/crlnumber ]; then
    echo 1001 > db/crlnumber
fi

if [ ! -s db/nodetype -o ! -s db/nodeid ]; then
    echo
    PS3="Specify the type of your Swaptacular node: "
    select opt in "Creditors agent" "Debtors agent" "Accounting authority"
    do
        case $opt in
            "Creditors agent")
                echo "00000001" > subnet.txt
                echo "Creditors Agents" > db/nodetype
                echo $(uuidgen) > db/nodeid
                break
                ;;
            "Debtors agent")
                echo "Debtors Agents" > db/nodetype
                echo $(uuidgen) > db/nodeid
                break
                ;;
            "Accounting authority")
                echo "Accounting Authorities" > db/nodetype
                mkdir subnets 2> /dev/null || true
                mkdir subnets/debtors 2> /dev/null || true
                mkdir subnets/creditors 2> /dev/null || true
                echo "-1" > subnets/debtors/SEQNUM
                echo "0" > subnets/creditors/SEQNUM
                ask_for_aa_serial_numbber
                break
                ;;
            *)
                echo "Invalid option $REPLY"
                ;;
        esac
    done
fi

if [ ! -s nodeinfo/servers.txt ]; then
    echo
    echo 'You must specify the network address of your server(s). The network'
    echo 'address consists of a domain name and a port number, separated by a'
    echo 'colon. For example: "myserver.example.com:1234". If you are unsure'
    echo 'what to enter here, do not worry, whatever you enter now, you will'
    echo 'be able to easily change later.'
    echo
    read -p 'Network address: ' server_address
    echo
    echo "$server_address" > nodeinfo/servers.txt
fi

if [ ! -s root-ca.conf ]; then
    generate_conf_file
fi

self_csr=$(mktemp)
trap delete_self_csr EXIT


if [ ! -s private/root-ca.key ]; then
    rm -f root-ca.crt
    openssl req -new \
            -config root-ca.conf \
            -out "$self_csr" \
            -keyout private/root-ca.key \
            -reqexts ca_ext
fi

if [ ! -s root-ca.crt ]; then
    if [ ! -s "$self_csr" ]; then
        echo
        echo 'A certificate signing request (CSR) must be created for your root CA.'
        openssl req -new \
                -config root-ca.conf \
                -out "$self_csr" \
                -key private/root-ca.key \
                -reqexts ca_ext
        [ -s "$self_csr" ] || exit 3;
        echo 'Successfully created a certificate signing request.'
    fi
    echo
    echo "A self-signed certificate must be created for your root CA."
    openssl ca -selfsign \
            -config root-ca.conf \
            -in "$self_csr" \
            -out root-ca.crt \
            -extensions ca_ext
    [ -s root-ca.crt ] || exit 1
    echo
    echo '***********************************************************************'
    echo '* IMPORTANT: A new self-signed certificate file has been created for  *'
    echo '*            your Swaptacular node. You should use this certificate   *'
    echo '*            as a trusted root certificate authority (CA) for your    *'
    echo '*            SSL connections with other Swaptacular nodes.            *'
    echo '***********************************************************************'
    echo "File location: $DIR/root-ca.crt"
fi
